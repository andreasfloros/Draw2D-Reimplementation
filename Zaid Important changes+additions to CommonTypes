// I never use ComponentId - I will use SymbolId declared towards the top of CommonTypes.fs:
type SymbolId = | SymbolId of string  


// Added Direction Type:
type Direction = Right | Left | Up | Down


// Altered version of Port: 
type Port = {
    Id : string
    // For example, an And would have input ports 0 and 1, and output port 0.
    // If the port is used in a Connection record as Source or Target, the Number is None. 
    PortNumber : int option
    PortType : PortType
    PortPos : XYPos
    RelativePortPos : XYPos  // This is relative to Pos of Component
    BusWidth : int Option
    ConnectionDirection : Direction
    HostId : SymbolId
}


// Altered version of Component Type:
type ComponentType =
    | Input of BusWidth: int | Output of BusWidth: int | IOLabel 
    | BusSelection of OutputWidth: int * OutputLSBit: int
    | Constant of Width: int * ConstValue: int
    | Not | And | Or | Xor | Nand | Nor | Xnor |Decode4
    | Mux2 | Demux2 | Mux4 | Demux4 
    | MuxN of NumOfInputs: int| DemuxN of NumOfOutputs: int
    | NbitsAdder of BusWidth: int
    | Custom of CustomComponentType // schematic sheet used as component
    | MergeWires | SplitWire of BusWidth: int // int is bus width
    // DFFE is a DFF with an enable signal.
    // No initial state for DFF or Register? Default 0.
    | DFF | DFFE | Register of BusWidth: int | RegisterE of BusWidth: int 
    | AsyncROM of Memory | ROM of Memory | RAM of Memory // memory is contents
    | Circle


// Altered version of Component:
type Component = {
    Id : SymbolId
    Type : ComponentType
    Label : string // All components have a label that may be empty.
    Ports : Port list
    NumOfInputs : int
    NumOfOutputs : int
    NumOfUpwardInputs : int // The number of upward input pins is included in NumOfInputs aswell
    Pos : XYPos
    H : float
    W : float
    LastDragPos : Helpers.XYPos //change to definition
    IsDragging : bool 
}


// The following function goes in my Helpers.fs module:
let log2 x = 
    log(float(x))/log(2.)
    |> System.Math.Ceiling
    |> int
